name: Continuous Integration

# Run on pushes to main or develop and on pull_request events
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]
    steps:
      # 1. Check out your code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up the Python version from the matrix
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # 3. Install your package and dev tools
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .           # install package
          pip install .[dev]

      # 4. Lint with flake8
      #- name: Lint with flake8
      #  run: flake8 deeplotyper

      # 5. Type-check with mypy
      #- name: Type-check with mypy
      #  run: mypy deeplotyper

      # 6. Run tests with pytest
      - name: Run tests with coverage
        run: |
          pytest --maxfail=1 --disable-warnings -q \
          --cov --cov-branch --cov-report=xml --cov-report=html --cov-config=.coveragerc \
          --junitxml=junit.xml -o junit_family=legacy

      - name: Show coverage report paths
        run: |
          echo "Working directory: $(pwd)"
          echo "Coverage XML path: $(pwd)/coverage.xml"
          ls -l ./coverage.xml
          cat ./coverage.xml
          echo "HTML coverage directory contents:"
          ls -l htmlcov/
          echo "Open the report at: file://$(pwd)/htmlcov/index.html"

      - name: Upload results to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: true

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./junit.xml