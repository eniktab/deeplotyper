name: Publish Python Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to build and publish (defaults to the tag that triggered this run)'
        required: false
        default: ''

permissions:
  contents: read         # for checkout
  packages: write        # for pypa/gh-action-pypi-publish
  id-token: write        # if you ever want OIDC to authenticate with external registries

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the correct ref (either the release tag or manual-input tag)
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag || github.ref }}

      # 2. Set up Python
      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # 3. Cache pip for faster repeat runs
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4. Install deps & run tests (if you have tests)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install your package in editable mode so tests can import it
          pip install -e .
          # Install test requirements
          pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run test suite
        run: |
          # adjust this line to match your test command
          pytest --maxfail=1 --disable-warnings -q

      # 5. Install build backend
      - name: Install build tools
        run: python -m pip install --upgrade build

      # 6. Build sdist & wheel
      - name: Build distributions
        run: python -m build

      # 7. Publish to PyPI
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

